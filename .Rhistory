library(dplyr)
# Chunk 3
list.files("data", "WatermainBreaks_wgs84")
d_raw <- readOGR(here::here("data", "WatermainBreaks_wgs84")) #import using read
# Chunk 4: sp_process
# Spatial data processing
sf_d <- st_as_sf(d_raw) #convert sp to sf object
sf::st_crs(sf_d) #check CRS, no EPSG code
sf_d <- sf::st_set_crs(sf_d, 4326) #set the CRS EPSG code to WGS84 which is 4326
# need to change this because Leaflet's default projection is 3857 (Google Mercator)
sf_d <- st_transform(sf_d, crs = sf::st_crs(sf_d)) #now reproject data
sf::st_crs(sf_d) #check CRS, now projected
sf_d %>%
mutate(BREAK_DATE = as.POSIXct(as.character(sf_d$BREAK_DATE), format= "%Y/%m/%d")) %>%
mutate(wk = lubridate::floor_date(BREAK_DATE, unit = "week"),
mth = lubridate::floor_date(BREAK_DATE, unit = "month"),
wk_n = lubridate::wday(BREAK_DATE, label = TRUE, abbr = FALSE),
mth_n = lubridate::month(BREAK_DATE, label = TRUE, abbr = FALSE))
# Aspatial data processing
dat <- sf_d
st_geometry(dat) <- NULL
dat
rm(list=ls())
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = TRUE, message = TRUE, fig.retina = 2)
# Chunk 2: packs
library(here)
library(rgdal)
library(sp)
library(sf)
library(leaflet)
library(dplyr)
# Chunk 3
list.files("data", "WatermainBreaks_wgs84")
d_raw <- readOGR(here::here("data", "WatermainBreaks_wgs84")) #import using read
# Chunk 4: sp_process
# Spatial data processing
sf_d <- st_as_sf(d_raw) #convert sp to sf object
sf::st_crs(sf_d) #check CRS, no EPSG code
sf_d <- sf::st_set_crs(sf_d, 4326) #set the CRS EPSG code to WGS84 which is 4326
# need to change this because Leaflet's default projection is 3857 (Google Mercator)
sf_d <- st_transform(sf_d, crs = sf::st_crs(sf_d)) #now reproject data
sf::st_crs(sf_d) #check CRS, now projected
# Chunk 5: asp_process
sf_d <- sf_d %>%
mutate(BREAK_DATE = as.POSIXct(as.character(sf_d$BREAK_DATE), format= "%Y/%m/%d")) %>%
mutate(wk = lubridate::floor_date(BREAK_DATE, unit = "week"),
mth = lubridate::floor_date(BREAK_DATE, unit = "month"),
wk_n = lubridate::wday(BREAK_DATE, label = TRUE, abbr = FALSE),
mth_n = lubridate::month(BREAK_DATE, label = TRUE, abbr = FALSE))
# Aspatial data processing
dat <- sf_d
st_geometry(dat) <- NULL
dat
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n()))
dat %>%
summarissssse_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n()))
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n()))
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n()))
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
kable()
library(here)
library(rgdal)
library(sp)
library(sf)
library(leaflet)
library(dplyr)
library(knitr)
library(kableExtra)
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
kable() %>%
kab
?kable_styling
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n()))
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
kable()
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather()
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather()
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::separate(key, sep = "_")
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::separate(key, sep = "_")
?tidyr::separate
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::separate(key, c("variable", "stat"),  sep = "_")
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::separate(key, c("variable", "stat"),  sep = "_")
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::separate(key, c("variable", "stat"))
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::separate(key, c("variable", "stat"), sep = "_.*$")
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::separate(key, c("variable", "stat"), sep = ".*_.*$")
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::separate(key, c("variable", "stat"), sep = "_")
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::separate(key, c("variable", "stat"), sep = ""(.*)_(.*)"")
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::separate(key, c("variable", "stat"), sep = "(.*)_(.*)")
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
extract(key, c("variable", "stat"), sep = "(.*)_(.*)")
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather()
?extract
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
extract(key, c("variable", "stat"), "(.*)_(.*)")
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
extract(key, c("variable", "stat"), regex = "(.*)_(.*)")
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
extract(col = key, c("vars", "stats"), regex = "(.*)_(.*)")
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
extract(col = key, c("vars", "stats"), regex = "(.*)_(.*)")
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather()
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::extract(col = key, into = c("vars", "stats"), regex = "(.*)_(.*)")
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
extract(col = key, into = c("vars", "stats"), regex = "(.*)_(.*)")
?extract_
?separate
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::extract(col = key, into = c("vars", "stats"), regex = "(.*)_(.*)") %>%
spread(stats)
library(tidyr)
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::extract(col = key, into = c("vars", "stats"), regex = "(.*)_(.*)") %>%
spread(key = stats)
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::extract(col = key, into = c("vars", "stats"), regex = "(.*)_(.*)") %>%
spread(key = "stats")
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::extract(col = key, into = c("vars", "stats"), regex = "(.*)_(.*)") %>%
spread(key = "stats",value = "value")
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::extract(col = key, into = c("vars", "stats"), regex = "(.*)_(.*)") %>%
spread(., key = "stats",value = "value")
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::extract(col = key, into = c("vars", "stats"), regex = "(.*)_(.*)") %>%
tidyr::spread(., key = "stats",value = "value")
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::extract(col = key, into = c("vars", "stats"), regex = "(.*)_(.*)") %>%
tidyr::spread(key = stats, value = value)
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::extract(col = key, into = c("vars", "stats"), regex = "(.*)_(.*)") %>%
tidyr::spread(key = stats, value = value)
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::extract(col = key, into = c("vars", "stats"), regex = "(.*)_(.*)") %>%
tidyr::spread(key = stats, value = value)
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::extract(col = key, into = c("vars", "stats"), regex = "(.*)_(.*)") %>%
tidyr::spread(key = stats, value = value) %>%
kable(col.names = c("Variables", "Maximum", "Mean", "Median", "Minimum", "N", "Standard Deviation")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n()))
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather()
dat %>%
summarise_if(is.numeric, funs(
median = median(.),
mean = mean(.),
max = max(.),
min = min(.),
sd = sd(.),
n = n())) %>%
gather() %>%
tidyr::extract(col = key, into = c("vars", "stats"), regex = "(.*)_(.*)") %>%
tidyr::spread(key = stats, value = value) %>%
kable(col.names = c("Variables", "Maximum", "Mean", "Median", "Minimum", "N", "Standard Deviation")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
dat
dat %>% class()
dat %>% map(~class(.))
dat %>% purrr::map(~class(.))
dat %>% select(BREAK_YEAR, wk, mth) %>%
count()
dat %>% select(BREAK_YEAR, wk, mth) %>%
dplyr::count()
?count
